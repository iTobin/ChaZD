function ajax(method,url,data,cb,before){
    var xhr = new XMLHttpRequest();
    xhr.open(method, url, true);
    xhr.onreadystatechange = function(){
        if (xhr.readyState != 4) {
            return;
        }
        cb(xhr);
    };
    if(before !== undefined) {
        before(xhr);
    }
    xhr.send(data);
}

var settings = {
    selectMode : "mouseSelect",     //划词的形式：直接划词 or Ctrl + 划词
    showPosition : "near",          //划词翻译结果显示的位置
    toggleKey : "ctrl",
    showTips : true,                //是否显示 Tips
    currentWord: "",                //当前划词查询的内容
    linkQuery: false,               //在链接上划词
    autoAudio: false,               //划词自动发音
    autoHide: false,                //自动隐藏翻译结果
    showDuration: 3,                //翻译结果显示持续时间
    defaultVoice: 0,                //划词默认发音：0--真人发音；1--英音；2--美音
    useHttps: false,                //是否使用 HTTPS 的接口
    autoLearn:true,                  //是否自动加入生词本
    apiName:"youdao"
};

var currentSettings = settings;
chrome.storage.sync.get(null, function(items) {
    for (var key in items) {
        currentSettings[key] = items[key];
    }
});

chrome.storage.onChanged.addListener(function(changes) {
    if (changes.linkQuery !== undefined) {
        currentSettings.linkQuery = changes.linkQuery.newValue;
    }
    if (changes.useHttps !== undefined) {
        currentSettings.useHttps = changes.useHttps.newValue;
    }
    if (changes.autoAudio !== undefined) {
        currentSettings.autoAudio = changes.autoAudio.newValue;
    }
    if (changes.defaultVoice !== undefined) {
        currentSettings.defaultVoice = changes.defaultVoice.newValue;
    }
    if (changes.selectMode !== undefined) {
        currentSettings.selectMode = changes.selectMode.newValue;
    }
    if (changes.toggleKey !== undefined) {
        currentSettings.toggleKey = changes.toggleKey.newValue;
    }
    if (changes.autoHide !== undefined) {
        currentSettings.autoHide = changes.autoHide.newValue;
    }
    if (changes.showDuration !== undefined) {
        currentSettings.showDuration = changes.showDuration.newValue;
    }
    if (changes.showPosition !== undefined) {
        currentSettings.showPosition = changes.showPosition.newValue;
    }
    if (changes.autoLearn !== undefined) {
        currentSettings.autoLearn = changes.autoLearn.newValue;
    }
    if (changes.apiName !== undefined) {
        currentSettings.apiName = changes.apiName.newValue;
    }
});

var frame = {
    //title frame
    titleContainer : "<div class=\"title-container #{3}\">#{1}#{2}</div>",
    titleWord : "<div class=\"title-word\">#{1}#{2}</div>",
    voiceContainer : "<div class=\"voice-container\" data-src=\"#{1}\" title=\"#{2}\" ></div>",
    titleTranslation : "<div class=\"title-translation\">#{1}</div>",

    //basic frame
    basicContainer : "<div class=\"basic-container\">#{1}#{2}</div>",

    //basic phonetic frame
    phoneticContainer : "<div class=\"phonetic-container\">#{1}#{2}</div>",
    ukPhoneticContainer : "<div class=\"uk-phonetic-container\">#{1}</div>",
    usPhoneticContainer : "<div class=\"us-phonetic-container\">#{1}</div>",

    //basic explain frame
    explainsContainer : "<div class=\"explains-container\">#{1}</div>",
    explainsList : "<ul class=\"explains-list\">#{1}</ul>",
    explain : "<li class=\"explains-item\">#{1}<span class=\"explains-item-value\">#{2}</span></li>",
    propertyContainer : "<b class=\"property-container\" title=\"#{1}\">#{2}</b>",

    //web explain frame
    webExplainsContainer : "<div class=\"web-explains-container\"><div class=\"web-title\">网络释义及短语</div>#{1}</div>",
    webExplainsList : "<ul class=\"web-explains-list\">#{1}</ul>",
    webExplain : "<li><span class=\"web-key\">#{1}</span><span class=\"web-value\">#{2}</span></li>"
};

var youdao = function(){
    var config = {appKey: "7291549c4ed52fe4", from: "EN", to : "zh-CHS", key : "YCTYJlyAoKcTYMKNo0YnkXLuIb7i5p18"};
    var urls = {
        dict : "http://openapi.youdao.com/api?from=" + config.keyfrom + "&to=" + config.to + "&appKey=" + config.appKey,
        // dict : "http://openapi.youdao.com/api",
        voice : "http://dict.youdao.com/dictvoice?audio=",
        dictHttps : "https://openapi.youdao.com/api?from=" + config.keyfrom + "&to=" + config.to + "&appKey=" + config.appKey,
        // dictHttps : "https://openapi.youdao.com/api",
        voiceHttps : "https://dict.youdao.com/dictvoice?audio="
    };
    var self = this;
    self.initVoice = function (src, type) {
        var title = "";
        if(type === 1){
            title = "英音";
        } else if (type === 2){
            title = "美音";
        } else {
            title = "真人发音";
        }
        return fmt(frame.voiceContainer, src, title);
    };
    self.checkCode = function (Code) {
        var response = {
            "message": "",
            "error": 0,
            "Code": 0
        };
        switch (Code) {
            case 0:
                response.Message = "查询成功";
                break;
            case 101:
                response.Message = "缺少必填的参数，出现这个情况还可能是et的值和实际加密方式不对应";
                response.error = 1;
                response.Code = 1;
                break;
            case 102:
                response.Message = "不支持的语言类型\n";
                response.error = 1;
                response.Code = 1;
                break;
            case 103:
                response.Message = "翻译的文本过长";
                response.error = 1;
                response.Code = 1;
                break;
            case 104:
                response.Message = "不支持的API类型";
                response.error = 1;
                response.Code = 1;
                break;
            case 105:
                response.Message = "不支持的签名类型";
                response.error = 1;
                response.Code = 1;
                break;
            case 106:
                response.Message = "不支持的响应类型";
                response.error = 1;
                response.Code = 1;
                break;
            case 107:
                response.Message = "不支持的传输加密类型";
                response.error = 1;
                response.Code = 1;
                break;
            case 108:
                response.Message = "appKey无效，注册账号， 登录后台创建应用和实例并完成绑定， 可获得应用ID和密钥等信息，其中应用ID就是appKey（ 注意不是应用密钥）";
                response.error = 1;
                response.Code = 1;
                break;
            case 109:
                response.Message = "batchLog格式不正确";
                response.error = 1;
                response.Code = 1;
                break;
            case 110:
                response.Message = "无相关服务的有效实例";
                response.error = 1;
                response.Code = 1;
                break;
            case 111:
                response.Message = "开发者账号无效，可能是账号为欠费状态";
                response.error = 1;
                response.Code = 1;
                break;
            case 201:
                response.Message = "解密失败，可能为DES,BASE64,URLDecode的错误";
                response.error = 1;
                response.Code = 1;
                break;
            case 202:
                response.Message = "签名检验失败";
                response.error = 1;
                response.Code = 1;
                break;
            case 203:
                response.Message = "访问IP地址不在可访问IP列表";
                response.error = 1;
                response.Code = 1;
                break;
            case 301:
                response.Message = "辞典查询失败\n";
                response.error = 1;
                response.Code = 1;
                break;
            case 302:
                response.Message = "翻译查询失败\n";
                response.error = 1;
                response.Code = 1;
                break;
            case 303:
                response.Message = "服务端的其它异常\n";
                response.error = 1;
                response.Code = 1;
                break;
            case 401:
                response.Message = "账户已经欠费停\n";
                response.error = 1;
                response.Code = 1;
                break;

            default:
        }
        return response;
    };
    self.shortWord = function (longWord) {
        return longWord.slice(0, longWord.lastIndexOf(" ", 50)).concat(" ...");
    };
    self.getVoice = function(result, type){
        var src = (currentSettings.useHttps ? urls.voiceHttps : urls.voice) + result.query;
        if(type !== undefined) {
            src = src + "&type=" + type;
        }
        return src;
    };
    self.initTitle = function (result) {
        var translation = result.translation;
        var queryWord = result.query;
        var voiceContainer = self.initVoice(self.getVoice(result));
        queryWord = queryWord.length >= 50 && self.wordSource == "select" ? self.shortWord(queryWord) : queryWord;
        debugger;
        var titleWord = fmt(frame.titleWord, queryWord, voiceContainer);
        var titleTranslation = translation?fmt(frame.titleTranslation, translation.toString()): "";
        return {
            titleBlock : fmt(frame.titleContainer, titleWord,  titleTranslation, queryWord.length >=50 ? "long-text" : "")
        };
    };
    self.haveTranslation = function (result) {
        var translation = result.translation;
        if (self.checkCode(result.errorCode).error||!translation) {
            return false;
        }
        var queryWord = result.query;
        if (trim(queryWord.toLowerCase()) === trim(translation.toString().toLowerCase())) {
            return false;
        }
        return true;
    };
    self.parseBasicPhonetic = function (result) {
        var basic = result.basic;
        var ukPhonetic = basic["uk-phonetic"];
        var usPhonetic = basic["us-phonetic"];
        if (ukPhonetic !== undefined && usPhonetic !== undefined) {
            var ukVoice = self.initVoice(self.getVoice(result,1), 1);
            var ukPhoneticContainer = fmt(frame.ukPhoneticContainer, "[" + ukPhonetic + "]" + ukVoice);
            var usVoice = self.initVoice(self.getVoice(result,2), 2);
            var usPhoneticContainer = fmt(frame.usPhoneticContainer, "[" + usPhonetic + "]" + usVoice);
            return fmt(frame.phoneticContainer, ukPhoneticContainer, usPhoneticContainer);
        }
        return fmt(frame.phoneticContainer, "", "");
    };
    self.parseProperty = function (property) {
        var propertyText = "";
        switch (property) {
            case "adj." :
                propertyText = "形容词";
                break;
            case "adv." :
                propertyText = "副词";
                break;
            case "n." :
                propertyText = "名词";
                break;
            case "vi." :
                propertyText = "不及物动词";
                break;
            case "vt." :
                propertyText = "及物动词";
                break;
            case "prep." :
                propertyText = "介词";
                break;
            case "conj." :
                propertyText = "连词";
                break;
            case "int." :
                propertyText = "感叹词";
                break;
            case "abbr." :
                propertyText = "代词";
                break;
            case "pron." :
                propertyText = "";
                break;
            default :
        }
        return propertyText;
    };
    self.parseBasicExplains = function (result) {
        var basic = result.basic;
        var explains = basic.explains;
        var i;
        var explainsContent = "";
        for (i = 0; i < explains.length; i++) {
            var currentExplain = explains[i];
            var haveProperty = currentExplain.indexOf(". ");
            var property = (haveProperty !== -1) ? currentExplain.slice(0, haveProperty + 1) : "";
            var propertyTitle = self.parseProperty(property);
            var propertyContainer = fmt(frame.propertyContainer, propertyTitle, property);
            var explainText = (haveProperty !== -1) ? currentExplain.slice(haveProperty + 1) : currentExplain;
            var explain = fmt(frame.explain, propertyContainer, explainText);
            explainsContent += explain;
        }
        return fmt(frame.explainsContainer, fmt(frame.explainsList, explainsContent));
    };
    self.parseBasicResult = function (result) {
        var phoneticBlock = self.parseBasicPhonetic(result);
        var explainsBlock = self.parseBasicExplains(result);
        var basicContainer = fmt(frame.basicContainer, phoneticBlock, explainsBlock);
        return basicContainer;
    };
    self.parseWebResult = function (result) {
        var web = result.web;
        var webExplainsContent = "";
        var i;
        for (i = 0; i < web.length ; i++) {
            var webExplain = fmt(frame.webExplain, web[i].key, web[i].value);
            webExplainsContent += webExplain;
        }
        return fmt(frame.webExplainsContainer, fmt(frame.webExplainsList, webExplainsContent));
    };
    self.parseResult = function (result) {
        //console.log("Response Text: \n" + responseText);
        var resultObj = self.checkCode(result.errorCode);
        resultObj.haveWebTranslation = false;
        if (!resultObj.error) {
            var title = self.initTitle(result);
            resultObj.titleBlock = title.titleBlock;
            resultObj.haveTranslation = self.haveTranslation(result);
            if (result.basic !== undefined) {
                var basicBlock = self.parseBasicResult(result);
                resultObj.basicBlock = basicBlock;
            }
            if (result.web !== undefined) {
                var webBlock = self.parseWebResult(result);
                resultObj.haveWebTranslation = true;
                resultObj.webBlock = webBlock;
            }
        }
        return resultObj;
    };
    var Query = function(queryWord, wordSource, sendResponse) {
        self.wordSource = wordSource;
        var url = currentSettings.useHttps ? urls.dictHttps : urls.dict;
        var salt = (new Date).getTime();
        var str1 = config.appKey + queryWord + salt + config.key;
        var sign = MD5(str1);
        url = url + "&salt=" + salt;
        url = url + "&q=" + queryWord;
        url = url + "&sign=" + sign;


        ajax("GET", url, null, function (xhr) {
            var result = JSON.parse(xhr.responseText);
            if (queryWord.indexOf("-") != -1 && !self.checkCode(result.errorCode).error && !self.haveTranslation(result)) {
                //优化使用连字符的词的查询结果
                new Query(queryWord.replace(/-/g, " "), wordSource, sendResponse);
            } else {
                var ret = self.parseResult(result);
                sendResponse(ret);
            }
        });

        /*$.ajax({
            url: url,
            type: 'get',
            dataType: 'json',
            data: {
                q: queryWord,
                from: config.from,
                to: config.to,
                appKey: config.appKey,
                salt: salt,
                sign: sign
            },
            success: function (result) {
                alert(result.errorCode);
                if (queryWord.indexOf("-") != -1 && !self.checkCode(result.errorCode).error && !self.haveTranslation(result)) {
                    //优化使用连字符的词的查询结果
                    new Query(queryWord.replace(/-/g, " "), wordSource, sendResponse);
                } else {
                    console.log(result);
                    var ret = self.parseResult(result);
                    sendResponse(ret);
                }
            }
        });*/

    };
    self.Query = Query;
};

/*var youdao = function(){
    var config = {key: 1155108168, keyfrom: "iwebsHttpGetTest"};
    var urls = {
        dict : "http://fanyi.youdao.com/openapi.do?keyfrom=" + config.keyfrom +"&key="+ config.key +"&type=data&doctype=json&version=1.1&q=",
        voice : "http://dict.youdao.com/dictvoice?audio=",
        dictHttps : "https://fanyi.youdao.com/openapi.do?keyfrom=" + config.keyfrom +"&key="+ config.key +"&type=data&doctype=json&version=1.1&q=",
        voiceHttps : "https://dict.youdao.com/dictvoice?audio="
    };
    var self = this;
    self.initVoice = function (src, type) {
        var title = "";
        if(type === 1){
            title = "英音";
        } else if (type === 2){
            title = "美音";
        } else {
            title = "真人发音";
        }
        return fmt(frame.voiceContainer, src, title);
    };
    self.checkCode = function (Code) {
        var response = {
            "message": "",
            "error": 0,
            "Code": 0
        };
        switch (Code) {
            case 0:
                response.Message = "查询成功";
                break;
            case 20:
                response.Message = "翻译的文本过长";
                response.error = 1;
                response.Code = 20;
                break;
            case 30:
                response.Message = "无法进行有效的翻译";
                response.error = 1;
                response.Code = 30;
                break;
            case 40:
                response.Message = "不支持的语言类型";
                response.error = 1;
                response.Code = 40;
                break;
            case 50:
                response.Message = "无效的key";
                response.error = 1;
                response.Code = 50;
                break;
            case 60:
                response.Message = "无辞典结果";
                response.error = 1;
                response.Code = 60;
                break;
            default:
        }
        return response;
    };
    self.shortWord = function (longWord) {
        return longWord.slice(0, longWord.lastIndexOf(" ", 50)).concat(" ...");
    };
    self.getVoice = function(result, type){
        var src = (currentSettings.useHttps ? urls.voiceHttps : urls.voice) + result.query;
        if(type !== undefined) {
            src = src + "&type=" + type;
        }
        return src;
    };
    self.initTitle = function (result) {
        var translation = result.translation;
        var queryWord = result.query;
        var voiceContainer = self.initVoice(self.getVoice(result));
        queryWord = queryWord.length >= 50 && self.wordSource == "select" ? self.shortWord(queryWord) : queryWord;
        debugger;
        var titleWord = fmt(frame.titleWord, queryWord, voiceContainer);
        var titleTranslation = translation?fmt(frame.titleTranslation, translation.toString()): "";
        return {
            titleBlock : fmt(frame.titleContainer, titleWord,  titleTranslation, queryWord.length >=50 ? "long-text" : "")
        };
    };
    self.haveTranslation = function (result) {
        var translation = result.translation;
        if (self.checkCode(result.errorCode).error||!translation) {
            return false;
        }
        var queryWord = result.query;
        if (trim(queryWord.toLowerCase()) === trim(translation.toString().toLowerCase())) {
            return false;
        }
        return true;
    };
    self.parseBasicPhonetic = function (result) {
        var basic = result.basic;
        var ukPhonetic = basic["uk-phonetic"];
        var usPhonetic = basic["us-phonetic"];
        if (ukPhonetic !== undefined && usPhonetic !== undefined) {
            var ukVoice = self.initVoice(self.getVoice(result,1), 1);
            var ukPhoneticContainer = fmt(frame.ukPhoneticContainer, "[" + ukPhonetic + "]" + ukVoice);
            var usVoice = self.initVoice(self.getVoice(result,2), 2);
            var usPhoneticContainer = fmt(frame.usPhoneticContainer, "[" + usPhonetic + "]" + usVoice);
            return fmt(frame.phoneticContainer, ukPhoneticContainer, usPhoneticContainer);
        }
        return fmt(frame.phoneticContainer, "", "");
    };
    self.parseProperty = function (property) {
        var propertyText = "";
        switch (property) {
            case "adj." :
                propertyText = "形容词";
                break;
            case "adv." :
                propertyText = "副词";
                break;
            case "n." :
                propertyText = "名词";
                break;
            case "vi." :
                propertyText = "不及物动词";
                break;
            case "vt." :
                propertyText = "及物动词";
                break;
            case "prep." :
                propertyText = "介词";
                break;
            case "conj." :
                propertyText = "连词";
                break;
            case "int." :
                propertyText = "感叹词";
                break;
            case "abbr." :
                propertyText = "代词";
                break;
            case "pron." :
                propertyText = "";
                break;
            default :
        }
        return propertyText;
    };
    self.parseBasicExplains = function (result) {
        var basic = result.basic;
        var explains = basic.explains;
        var i;
        var explainsContent = "";
        for (i = 0; i < explains.length; i++) {
            var currentExplain = explains[i];
            var haveProperty = currentExplain.indexOf(". ");
            var property = (haveProperty !== -1) ? currentExplain.slice(0, haveProperty + 1) : "";
            var propertyTitle = self.parseProperty(property);
            var propertyContainer = fmt(frame.propertyContainer, propertyTitle, property);
            var explainText = (haveProperty !== -1) ? currentExplain.slice(haveProperty + 1) : currentExplain;
            var explain = fmt(frame.explain, propertyContainer, explainText);
            explainsContent += explain;
        }
        return fmt(frame.explainsContainer, fmt(frame.explainsList, explainsContent));
    };
    self.parseBasicResult = function (result) {
        var phoneticBlock = self.parseBasicPhonetic(result);
        var explainsBlock = self.parseBasicExplains(result);
        var basicContainer = fmt(frame.basicContainer, phoneticBlock, explainsBlock);
        return basicContainer;
    };
    self.parseWebResult = function (result) {
        var web = result.web;
        var webExplainsContent = "";
        var i;
        for (i = 0; i < web.length ; i++) {
            var webExplain = fmt(frame.webExplain, web[i].key, web[i].value);
            webExplainsContent += webExplain;
        }
        return fmt(frame.webExplainsContainer, fmt(frame.webExplainsList, webExplainsContent));
    };
    self.parseResult = function (result) {
        //console.log("Response Text: \n" + responseText);
        var resultObj = self.checkCode(result.errorCode);
        resultObj.haveWebTranslation = false;
        if (!resultObj.error) {
            var title = self.initTitle(result);
            resultObj.titleBlock = title.titleBlock;
            resultObj.haveTranslation = self.haveTranslation(result);
            if (result.basic !== undefined) {
                var basicBlock = self.parseBasicResult(result);
                resultObj.basicBlock = basicBlock;
            }
            if (result.web !== undefined) {
                var webBlock = self.parseWebResult(result);
                resultObj.haveWebTranslation = true;
                resultObj.webBlock = webBlock;
            }
        }
        return resultObj;
    };
    var Query = function(queryWord, wordSource, sendResponse) {
        self.wordSource = wordSource;
        var url = (currentSettings.useHttps ? urls.dictHttps : urls.dict) + queryWord;
        ajax("GET", url, null, function (xhr) {
            var result = JSON.parse(xhr.responseText);
            if (queryWord.indexOf("-") != -1 && !self.checkCode(result.errorCode).error && !self.haveTranslation(result)) {
                //优化使用连字符的词的查询结果
                new Query(queryWord.replace(/-/g, " "), wordSource, sendResponse);
            } else {
                var ret = self.parseResult(result);
                sendResponse(ret);
            }
        });
    };
    self.Query = Query;
};*/

var shanbay = function(){
    var self = this;
    self.dict = "http://www.shanbay.com/api/v1/bdc/search/?word=";
    self.learn = "http://www.shanbay.com/api/v1/bdc/learning/";
    self.login = "http://www.shanbay.com/accounts/login/";
    youdao.call(this);

    /*jshint camelcase: false */
    self.getVoice = function(result,type){
        var basic = result.basic;
        var src = basic.audio;
        if(type == 1) {
            src = basic.uk_audio;
        }else if(type == 2){
            src = basic.us_audio;
        }
        return src;
    };
    self.parseBasicPhonetic = function (result) {
        var basic = result.basic;
        if (basic.pronunciations) {
            var ukPhonetic = basic.pronunciations.uk;
            var usPhonetic = basic.pronunciations.us;
            if(ukPhonetic !== undefined && usPhonetic !== undefined){
                var ukVoice = self.initVoice(self.getVoice(result,1), 1);
                var ukPhoneticContainer = fmt(frame.ukPhoneticContainer, "[" + ukPhonetic + "]" + ukVoice);
                var usVoice = self.initVoice(self.getVoice(result,2), 2);
                var usPhoneticContainer = fmt(frame.usPhoneticContainer, "[" + usPhonetic + "]" + usVoice);
                return fmt(frame.phoneticContainer, ukPhoneticContainer, usPhoneticContainer);
            }
        }
        var voice = self.initVoice(self.getVoice(result));
        var phoneticContainer = fmt(frame.usPhoneticContainer, "[" + basic.phonetic + "]" + voice);
        return fmt(frame.phoneticContainer, phoneticContainer, "");
    };
    self.parseBasicExplains = function (result) {
        var basic = result.basic;
        var definition = basic.definition;
        var i;
        var explainsContent = "";
        var explains = definition.split("\n");
        for (i = 0; i < explains.length; i++) {
            var currentExplain = explains[i];
            var haveProperty = currentExplain.indexOf(".");
            var property = (haveProperty !== -1) ? currentExplain.slice(0, haveProperty + 1) : "";
            var propertyTitle = self.parseProperty(property);
            var propertyContainer = fmt(frame.propertyContainer, propertyTitle, property);
            var explainText = (haveProperty !== -1) ? currentExplain.slice(haveProperty + 1) : currentExplain;
            var explain = fmt(frame.explain, propertyContainer, explainText);
            explainsContent += explain;
        }
        return fmt(frame.explainsContainer, fmt(frame.explainsList, explainsContent));
    };
    self.Query = function(queryWord, wordSource, sendResponse) {
        var url = self.dict + queryWord;
        /*jshint camelcase: false */
        ajax("GET", url, null, function (xhr) {
            var result = JSON.parse(xhr.responseText);
            var data = result.data;
            if (result.status_code === 0) {
                data = {basic:{
                    pronunciations:data.pronunciations,
                    phonetic:data.pron,
                    audio:data.audio,
                    us_audio:data.us_audio,
                    uk_audio:data.uk_audio,
                    cn_definition:data.cn_definition,
                    en_definition:data.en_definition,
                    definition:data.definition
                },query:data.content,errorCode:0};
                var ret = self.parseResult(data);
                sendResponse(ret);
                data = {id: result.data.id, content_type: "vocabulary"};
                //加入生词本
                if(currentSettings.autoLearn){
                    ajax("POST", self.learn, JSON.stringify(data), function (xhr) {
                        var result = JSON.parse(xhr.responseText);
                        if(xhr.status == 401){
                            if (confirm(result.msg+"\n你选择了自动加入生词本,但你没有登陆扇贝网或登陆已失效，是否现在登陆?")){
                                chrome.tabs.create({ url: self.login });
                            }else{
                                currentSettings.autoLearn = false;
                            }
                        }
                    }, function (xhr) {
                        xhr.setRequestHeader("Content-Type", "application/json");
                    });
                }
            } else if (result.status_code === 1) {
                var y = new youdao();
                y.Query(queryWord, wordSource, sendResponse);
            }
        });
    };
};

var api = {
    youdao:youdao,
    shanbay:shanbay,
};

//判断一个初始化后的对象是否为空
function isEmpty(obj) {
    for (var name in obj) {
        return false;
    }
    return true;
}

var MD5 = function (string) {

    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }

    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }

    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    string = Utf8Encode(string);

    x = ConvertToWordArray(string);

    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toUpperCase();
}

/*
 * 文本模板函数fmt, @greatghoul
 * 参考TransIt。
 */
function fmt() {
    var args = arguments;
    return args[0].replace(/#{(.*?)}/g, function (match, prop) {
        return function (obj, props) {
            var prop = /\d+/.test(props[0]) ? parseInt(props[0]) : props[0];
            if (props.length > 1) {
                return arguments.callee(obj[prop], props.slice(1));
            } else {
                return obj[prop];
            }
        }(typeof args[1] === "object" ? args[1] : args, prop.split(/\.|\[|\]\[|\]\./));
    });
}

function trim(str) {
    return str.replace(/(^\s*)|(\s*$)/g, "");
}